name: Deploy doc

on:
  workflow_run:
    workflows: ["Build doc"]
    types:
      - completed

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    if: ${{github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'}}
    steps:
      # Manage workflow deployment status. `enable-commit-status` from `nwtgck/actions-netlify` would handle this,
      # but presently does not work correctly via split workflow. It is useful in a split workflow as the 1st stage
      # no longer indicates if the entire workflow/deployment was successful.
      - name: 'Commit Status: Set Workflow Status as Pending'
        uses: myrotvorets/set-commit-status-action@1.1.6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending
          # Should match `env.PR_HEADSHA` when triggered by `pull_request` event workflow,
          # Avoids failure of ENV being unavailable if job fails early:
          sha: ${{ github.event.workflow_run.head_sha }}
          context: 'Deploy Preview (pull_request => workflow_run)'

      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - run: npm install --global netlify-cli@6
      - run: npm install unzipper@0.10

      # - name: Get pull request number
      #   uses: actions/github-script@v6
      #   id: pull-request-number
      #   with:
      #     result-encoding: string
      #     script: |
      #       const unzipper = require('unzipper');
      #       const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         run_id: ${{github.event.workflow_run.id}}
      #       });
      #       const artifact = artifacts.data.artifacts.filter(
      #         artifact => artifact.name === 'pr'
      #       )[0];
      #       if (!artifact) {
      #         throw new Error('No pr artifact found');
      #       }
      #       const download = await github.rest.actions.downloadArtifact({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         artifact_id: artifact.id,
      #         archive_format: 'zip'
      #       });
      #       const directory = await unzipper.Open.buffer(Buffer.from(download.data));
      #       const file = directory.files.find(d => d.path === 'number');
      #       const content = await file.buffer();
      #       return content.toString();
      - uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: doc-build.yml
          pr: ${{steps.pull-request-number.outputs.result}}
          name: doc

      - run: cat pr_number
      - run: ls -ltrh
      - run: ls -ltrh _build/html
      # - name: Deploy to Netlify
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{secrets.NETLIFY_AUTH_TOKEN}}
      #     NETLIFY_SITE_ID: ${{secrets.NETLIFY_SITE_ID}}
      #   run: netlify deploy --dir=build/site --alias=deploy-preview-${{steps.pull-request-number.outputs.result}}

      # - name: Add comment to pull request
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const pullRequestNumber = parseInt(${{steps.pull-request-number.outputs.result}}, 10);
      #       const start = ':package:';
      #       const author = 'github-actions[bot]';
      #       const comments = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: pullRequestNumber
      #       });
      #       const commentExists = comments.data.some(
      #         comment => comment.user.login === author && comment.body.startsWith(start)
      #       );
      #       if (!commentExists) {
      #         await github.rest.issues.createComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           issue_number: pullRequestNumber,
      #           body: `${start} Preview the website for this branch here: https://deploy-preview-${pullRequestNumber}--ol-site.netlify.app/.`
      #         });
      #       } else {
      #         console.log(`Preview URL comment already added to PR #${pullRequestNumber}`);
      #       }

      # ==================== #
      # Deploy preview build #
      # ==================== #

      # - name: 'Send preview build to Netlify'
      #   uses: nwtgck/actions-netlify@v2.0
      #   id: preview
      #   timeout-minutes: 1
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     # Fail the job early if credentials are missing / invalid:
      #     fails-without-credentials: true
      #     # Sets/creates the Netlify deploy URL prefix.
      #     # Uses the PR number for uniqueness:
      #     alias: ${{ env.NETLIFY_SITE_PREFIX }}
      #     # Only publish the contents of the build output:
      #     publish-dir: ${{ env.BUILD_DIR }}
      #     # Custom message for the deploy log on Netlify:
      #     deploy-message: '${{ env.PR_TITLE }} (PR #${{ env.PR_NUMBER }} @ commit: ${{ env.PR_HEADSHA }})'

      #     # Note: Split workflow incorrectly references latest primary branch commit for deployment.
      #     # Assign to non-default Deployment Environment for better management:
      #     github-deployment-environment: documentation-previews
      #     github-deployment-description: 'Preview deploy for documentation PRs'

      #     # Note - PR context used by this action is incorrect. These features are broken with split workflow:
      #     # https://github.com/nwtgck/actions-netlify/issues/545
      #     # Disable unwanted action defaults:
      #     # Disable adding deploy comment on pre-merge commit (Github creates this for PR diff):
      #     enable-commit-comment: false
      #     # Disable adding a "Netlify - Netlify deployment" check status:
      #     enable-commit-status: false
      #     # Disable. We provide a custom PR comment in the next action:
      #     enable-pull-request-comment: false

      #     # If a `netlify.toml` config is ever needed, enable this:
      #     # netlify-config-path: ./docs/netlify.toml
      #     # If ever switching from Github Pages, enable this conditionally (false by default):
      #     # production-deploy: false

      - name: 'Commit Status: Update deployment status'
        uses: myrotvorets/set-commit-status-action@1.1.6
        # Always run this step regardless of job failing early:
        if: ${{ always() }}
        env:
          DEPLOY_SUCCESS: Successfully deployed preview.
          DEPLOY_FAILURE: Failed to deploy preview.
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status == 'success' && 'success' || 'failure' }}
          sha: ${{ github.event.workflow_run.head_sha }}
          context: 'Deploy Preview (pull_request => workflow_run)'
          description: ${{ job.status == 'success' && env.DEPLOY_SUCCESS || env.DEPLOY_FAILURE }}
